/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as PrivateRouteImport } from './routes/_private'
import { Route as PrivateIndexRouteImport } from './routes/_private/index'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as PrivateUsersRouteImport } from './routes/_private/users'
import { Route as PrivateTasksIndexRouteImport } from './routes/_private/tasks/index'
import { Route as PrivateSubjectsIndexRouteImport } from './routes/_private/subjects/index'
import { Route as PrivateTasksTaskIdRouteImport } from './routes/_private/tasks/$taskId'
import { Route as PrivateSubjectsNewRouteImport } from './routes/_private/subjects/new'
import { Route as PrivateSubjectsSubjectIdRouteImport } from './routes/_private/subjects/$subjectId'
import { Route as PrivateSubjectsSubjectIdEditRouteImport } from './routes/_private/subjects/$subjectId.edit'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRoute = PrivateRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateIndexRoute = PrivateIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)
const PrivateUsersRoute = PrivateUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateTasksIndexRoute = PrivateTasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateSubjectsIndexRoute = PrivateSubjectsIndexRouteImport.update({
  id: '/subjects/',
  path: '/subjects/',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateTasksTaskIdRoute = PrivateTasksTaskIdRouteImport.update({
  id: '/tasks/$taskId',
  path: '/tasks/$taskId',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateSubjectsNewRoute = PrivateSubjectsNewRouteImport.update({
  id: '/subjects/new',
  path: '/subjects/new',
  getParentRoute: () => PrivateRoute,
} as any)
const PrivateSubjectsSubjectIdRoute =
  PrivateSubjectsSubjectIdRouteImport.update({
    id: '/subjects/$subjectId',
    path: '/subjects/$subjectId',
    getParentRoute: () => PrivateRoute,
  } as any)
const PrivateSubjectsSubjectIdEditRoute =
  PrivateSubjectsSubjectIdEditRouteImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => PrivateSubjectsSubjectIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/users': typeof PrivateUsersRoute
  '/login': typeof PublicLoginRoute
  '/': typeof PrivateIndexRoute
  '/subjects/$subjectId': typeof PrivateSubjectsSubjectIdRouteWithChildren
  '/subjects/new': typeof PrivateSubjectsNewRoute
  '/tasks/$taskId': typeof PrivateTasksTaskIdRoute
  '/subjects': typeof PrivateSubjectsIndexRoute
  '/tasks': typeof PrivateTasksIndexRoute
  '/subjects/$subjectId/edit': typeof PrivateSubjectsSubjectIdEditRoute
}
export interface FileRoutesByTo {
  '/users': typeof PrivateUsersRoute
  '/login': typeof PublicLoginRoute
  '/': typeof PrivateIndexRoute
  '/subjects/$subjectId': typeof PrivateSubjectsSubjectIdRouteWithChildren
  '/subjects/new': typeof PrivateSubjectsNewRoute
  '/tasks/$taskId': typeof PrivateTasksTaskIdRoute
  '/subjects': typeof PrivateSubjectsIndexRoute
  '/tasks': typeof PrivateTasksIndexRoute
  '/subjects/$subjectId/edit': typeof PrivateSubjectsSubjectIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_private': typeof PrivateRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_private/users': typeof PrivateUsersRoute
  '/_public/login': typeof PublicLoginRoute
  '/_private/': typeof PrivateIndexRoute
  '/_private/subjects/$subjectId': typeof PrivateSubjectsSubjectIdRouteWithChildren
  '/_private/subjects/new': typeof PrivateSubjectsNewRoute
  '/_private/tasks/$taskId': typeof PrivateTasksTaskIdRoute
  '/_private/subjects/': typeof PrivateSubjectsIndexRoute
  '/_private/tasks/': typeof PrivateTasksIndexRoute
  '/_private/subjects/$subjectId/edit': typeof PrivateSubjectsSubjectIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/users'
    | '/login'
    | '/'
    | '/subjects/$subjectId'
    | '/subjects/new'
    | '/tasks/$taskId'
    | '/subjects'
    | '/tasks'
    | '/subjects/$subjectId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/users'
    | '/login'
    | '/'
    | '/subjects/$subjectId'
    | '/subjects/new'
    | '/tasks/$taskId'
    | '/subjects'
    | '/tasks'
    | '/subjects/$subjectId/edit'
  id:
    | '__root__'
    | '/_private'
    | '/_public'
    | '/_private/users'
    | '/_public/login'
    | '/_private/'
    | '/_private/subjects/$subjectId'
    | '/_private/subjects/new'
    | '/_private/tasks/$taskId'
    | '/_private/subjects/'
    | '/_private/tasks/'
    | '/_private/subjects/$subjectId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/': {
      id: '/_private/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateIndexRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_private/users': {
      id: '/_private/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof PrivateUsersRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/tasks/': {
      id: '/_private/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof PrivateTasksIndexRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/subjects/': {
      id: '/_private/subjects/'
      path: '/subjects'
      fullPath: '/subjects'
      preLoaderRoute: typeof PrivateSubjectsIndexRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/tasks/$taskId': {
      id: '/_private/tasks/$taskId'
      path: '/tasks/$taskId'
      fullPath: '/tasks/$taskId'
      preLoaderRoute: typeof PrivateTasksTaskIdRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/subjects/new': {
      id: '/_private/subjects/new'
      path: '/subjects/new'
      fullPath: '/subjects/new'
      preLoaderRoute: typeof PrivateSubjectsNewRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/subjects/$subjectId': {
      id: '/_private/subjects/$subjectId'
      path: '/subjects/$subjectId'
      fullPath: '/subjects/$subjectId'
      preLoaderRoute: typeof PrivateSubjectsSubjectIdRouteImport
      parentRoute: typeof PrivateRoute
    }
    '/_private/subjects/$subjectId/edit': {
      id: '/_private/subjects/$subjectId/edit'
      path: '/edit'
      fullPath: '/subjects/$subjectId/edit'
      preLoaderRoute: typeof PrivateSubjectsSubjectIdEditRouteImport
      parentRoute: typeof PrivateSubjectsSubjectIdRoute
    }
  }
}

interface PrivateSubjectsSubjectIdRouteChildren {
  PrivateSubjectsSubjectIdEditRoute: typeof PrivateSubjectsSubjectIdEditRoute
}

const PrivateSubjectsSubjectIdRouteChildren: PrivateSubjectsSubjectIdRouteChildren =
  {
    PrivateSubjectsSubjectIdEditRoute: PrivateSubjectsSubjectIdEditRoute,
  }

const PrivateSubjectsSubjectIdRouteWithChildren =
  PrivateSubjectsSubjectIdRoute._addFileChildren(
    PrivateSubjectsSubjectIdRouteChildren,
  )

interface PrivateRouteChildren {
  PrivateUsersRoute: typeof PrivateUsersRoute
  PrivateIndexRoute: typeof PrivateIndexRoute
  PrivateSubjectsSubjectIdRoute: typeof PrivateSubjectsSubjectIdRouteWithChildren
  PrivateSubjectsNewRoute: typeof PrivateSubjectsNewRoute
  PrivateTasksTaskIdRoute: typeof PrivateTasksTaskIdRoute
  PrivateSubjectsIndexRoute: typeof PrivateSubjectsIndexRoute
  PrivateTasksIndexRoute: typeof PrivateTasksIndexRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateUsersRoute: PrivateUsersRoute,
  PrivateIndexRoute: PrivateIndexRoute,
  PrivateSubjectsSubjectIdRoute: PrivateSubjectsSubjectIdRouteWithChildren,
  PrivateSubjectsNewRoute: PrivateSubjectsNewRoute,
  PrivateTasksTaskIdRoute: PrivateTasksTaskIdRoute,
  PrivateSubjectsIndexRoute: PrivateSubjectsIndexRoute,
  PrivateTasksIndexRoute: PrivateTasksIndexRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
